package com.company;

import org.graphwalker.core.machine.ExecutionContext;
import org.graphwalker.java.annotation.GraphWalker;
import org.junit.Assert;

import static org.junit.Assert.assertEquals;

/**
 * Implements the GraphWalker model: src/main/resources/SmallTest.json
 * <p/>
 * The interface SmallTest, that SomeSmallTest implements, is generated by
 * running: mvn graphwalker:generate-sources
 * also: mvn compile
 */

@GraphWalker()
public class SomeSmallTest extends ExecutionContext implements HtmlStripMachineTest {

  StringBuilder actual = new StringBuilder();
  StringBuilder expected = new StringBuilder();
  HtmlStripMachine machine = new HtmlStripMachine();

  private void processChar(char c, boolean echo){
    actual.append(machine.process(c));
    if (echo) expected.append(c);
  }

  private void check(){
    assertEquals(expected.toString(), actual.toString());
  }

  @Override
  public void v_INI() {
    check();
  }

  @Override
  public void e_notQuote() {
    processChar('c', false);
  }

  @Override
  public void v_QTE() {
    check();
  }

  @Override
  public void e_quote() {
    processChar('\'', false);
  }

  @Override
  public void v_DQT() {
    check();
  }

  @Override
  public void e_smallerTag() {
    processChar('<', false);

  }

  @Override
  public void v_TAG() {
    check();
  }

  @Override
  public void e_initial() {
    processChar('a', true);
  }

  @Override
  public void e_notTag() {
    processChar('b', false);
  }

  @Override
  public void e_doubleQuote() {
    processChar('"', false);
  }

  @Override
  public void e_biggerTag() {
    processChar('>', false);
  }

  @Override
  public void e_notDoubleQuote() {
    processChar('d', false);
  }

}
